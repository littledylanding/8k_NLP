Index: event study/markov/markov.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\neight_k_df = pd.read_csv('FilingData.csv')\neight_k_df.drop_duplicates(inplace=True)\neight_k_df['Filing Date'] = pd.to_datetime(eight_k_df['Filing Date'])\neight_k_df['Items'] = eight_k_df['Items'].str.replace(' ', '')\neight_k_df = eight_k_df.groupby(['Ticker', 'Filing Date']).agg({'Items': lambda x: ','.join(x)}).reset_index()\ndata = eight_k_df.assign(Items=eight_k_df['Items'].str.split(',')).explode('Items', ignore_index=True)\nitems = list(data['Items'].unique())\nerr = ['2.02101', '2.02104', '7.01104']\nbad = ['1.03', '2.05', '5.01', '3.01']\nfor x in err:\n    items.remove(x)\nitems = sorted([item for item in items if not isinstance(item, float) or not np.isnan(item)])\nl1 = len(items)\nl2 = len(bad)\nTickers = sorted(data['Ticker'].unique())\nDF = []\nres = np.zeros((l1, l1))\nnum = defaultdict(int)\nfor company in Tickers:\n    data = eight_k_df[eight_k_df['Ticker'] == company].dropna().sort_values(by=['Filing Date'])\n    for t in range(len(data) - 1):\n        curr = data['Items'].iloc[t].split(',')\n        next = data['Items'].iloc[t + 1].split(',')\n        if (data['Filing Date'].iloc[t + 1] - data['Filing Date'].iloc[t]).days < 90:\n            curr_idx = []\n            next_idx = []\n            for item in curr:\n                if item in items:\n                    num[item] += 1\n                    curr_idx.append(items.index(item))\n            for item in next:\n                if item in items:\n                    next_idx.append(items.index(item))\n            for idx1 in curr_idx:\n                for idx2 in next_idx:\n                    res[idx1, idx2] += 1\n        else:\n            curr_idx = []\n            for item in curr:\n                curr_idx.append(items.index(item))\nn = np.zeros(l1)\nfor i in range(l1):\n    n[i] = num[items[i]]\nn[n == 0] = 1\nres /= n[:, None]\nres = pd.DataFrame(res)\nres.columns = res.index = items\nres.to_excel('All items markov.xlsx')\nres = res[bad]\nres.to_excel('Bad items markov.xlsx')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/event study/markov/markov.py b/event study/markov/markov.py
--- a/event study/markov/markov.py	(revision 9b657613614f63cc4517eb7e4088ff4362269d67)
+++ b/event study/markov/markov.py	(date 1698792887784)
@@ -2,6 +2,19 @@
 import numpy as np
 from collections import defaultdict
 
+
+def get_next_rows_within_90_days(row, df):
+    current_datetime = row.name
+    end_datetime = current_datetime + pd.Timedelta(days=90)
+    next_items = []
+    start_idx = df.index.get_loc(current_datetime) + 1
+    for idx in range(start_idx, len(df)):
+        if df.index[idx] > end_datetime:
+            break
+        next_items.extend(df.iloc[idx]['Items'])
+    return next_items
+
+
 eight_k_df = pd.read_csv('FilingData.csv')
 eight_k_df.drop_duplicates(inplace=True)
 eight_k_df['Filing Date'] = pd.to_datetime(eight_k_df['Filing Date'])
@@ -20,35 +33,40 @@
 DF = []
 res = np.zeros((l1, l1))
 num = defaultdict(int)
+num2 = defaultdict(int)
 for company in Tickers:
     data = eight_k_df[eight_k_df['Ticker'] == company].dropna().sort_values(by=['Filing Date'])
+    data.set_index('Filing Date', inplace=True)
+    data['Items'] = data['Items'].str.split(',')
+    data['Items_90'] = data.apply(lambda row: get_next_rows_within_90_days(row, data), axis=1)
     for t in range(len(data) - 1):
-        curr = data['Items'].iloc[t].split(',')
-        next = data['Items'].iloc[t + 1].split(',')
-        if (data['Filing Date'].iloc[t + 1] - data['Filing Date'].iloc[t]).days < 90:
-            curr_idx = []
-            next_idx = []
-            for item in curr:
-                if item in items:
-                    num[item] += 1
-                    curr_idx.append(items.index(item))
-            for item in next:
-                if item in items:
-                    next_idx.append(items.index(item))
-            for idx1 in curr_idx:
-                for idx2 in next_idx:
-                    res[idx1, idx2] += 1
-        else:
-            curr_idx = []
-            for item in curr:
-                curr_idx.append(items.index(item))
+        curr = list(set(data['Items'].iloc[t]))
+        next = list(set(data['Items_90'].iloc[t + 1]))
+        curr_idx = []
+        next_idx = []
+        for item in curr:
+            if item in items:
+                num[item] += 1
+                curr_idx.append(items.index(item))
+        for item in next:
+            if item in items:
+                num2[item] += 1
+                next_idx.append(items.index(item))
+        for idx1 in curr_idx:
+            for idx2 in next_idx:
+                res[idx1, idx2] += 1
 n = np.zeros(l1)
 for i in range(l1):
     n[i] = num[items[i]]
 n[n == 0] = 1
+num = pd.DataFrame.from_dict(num, orient='index', columns=['num'])
+num2 = {key: [value] for key, value in num2.items()}
+num2 = pd.DataFrame.from_dict(num2, orient='columns')
 res /= n[:, None]
 res = pd.DataFrame(res)
 res.columns = res.index = items
+res = res.join(num, how='left')
+res = pd.concat([res, num2], axis=0)
 res.to_excel('All items markov.xlsx')
 res = res[bad]
 res.to_excel('Bad items markov.xlsx')
